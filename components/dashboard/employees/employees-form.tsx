'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { InfoIcon, LoaderCircle } from 'lucide-react';
import { createEmployee, updateEmployee } from '@/actions/employees.actions';
import { BreadcrumbItem } from '@/lib/types';
import AppLayout from '@/layouts/app-layout';
import EmployeesLayout from '@/layouts/employees/layout';

const roles = ['Admin', 'Manager', 'Cashier'] as const;

const formSchema = z.object({
  first_name: z.string().min(1, 'First name is required'),
  last_name: z.string().min(1, 'Last name is required'),
  email: z.string().email('Invalid email address'),
  phone_number: z.string().optional(),
  role: z.enum(roles),
  branch_id: z.string().optional(),
  position: z.string().optional(),
  password: z.string().min(6, 'Password must be at least 6 characters').optional(),
}).superRefine((data, ctx) => {
  if (!data.branch_id && data.role !== 'Admin') {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: 'Branch is required for non-admin roles',
      path: ['branch_id']
    });
  }
});

type EmployeeFormValues = z.infer<typeof formSchema>;

interface EmployeeFormProps {
  employeeId?: string;
  branches?: {
    id: string;
    branch_name: string
  }[];
  initialData?: Partial<EmployeeFormValues>;
}

const breadcrumbs: BreadcrumbItem[] = [
  { title: 'Employees', href: '/employees' },
];

export default function EmployeeForm({ employeeId, branches = [], initialData }: EmployeeFormProps) {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [alert, setAlert] = useState<{ type: 'success' | 'error'; message: string } | null>(null);

  const form = useForm<EmployeeFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      first_name: initialData?.first_name || '',
      last_name: initialData?.last_name || '',
      email: initialData?.email || '',
      phone_number: initialData?.phone_number || '',
      role: initialData?.role || 'Cashier',
      branch_id: initialData?.branch_id || '',
      position: initialData?.position || '',
      password: '',
    }
  });

  useEffect(() => {
    const subscription = form.watch((value) => {
      console.log('Form values:', value);
      console.log('Form errors:', form.formState.errors);
    });
    return () => subscription.unsubscribe();
  }, [form, form.watch]);

  const onSubmit = async (data: EmployeeFormValues) => {
    try {
      setLoading(true);
      setAlert(null);

      const baseData = {
        first_name: data.first_name,
        last_name: data.last_name,
        email: data.email,
        phone_number: data.phone_number || '',
        role: data.role,
        branch_id: data.branch_id || '',
        position: data.position || '',
      };

      if (employeeId) {
        // For updates
        const result = await updateEmployee(employeeId, {
          ...baseData,
          _id: employeeId
        });
        handleResult(result);
      } else {
        // For new employees
        if (!data.password) {
          setAlert({ type: 'error', message: 'Password is required' });
          return;
        }
        const result = await createEmployee({
          ...baseData,
          password: data.password,
          _id: '' // Will be generated by the server
        });
        handleResult(result);
      }
    } catch (error) {
      console.error('Submission error:', error);
      setAlert({ type: 'error', message: 'An unexpected error occurred' });
    } finally {
      setLoading(false);
    }
  };

  const handleResult = (result: { success?: string; error?: string } | undefined) => {
    if (result?.success) {
      setAlert({ type: 'success', message: result.success });
      if (!employeeId) form.reset();
      setTimeout(() => router.push('/employees'), 1500);
    } else {
      setAlert({ type: 'error', message: result?.error || 'An error occurred' });
    }
  };

  return (
    <AppLayout breadcrumbs={breadcrumbs}>
      <EmployeesLayout>
        <div className="space-y-6 w-full max-w-full">
          <h1 className="text-2xl font-bold">
            {employeeId ? 'Edit Employee' : 'Create New Employee'}
          </h1>

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6 border p-5 rounded-md">
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="first_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>First Name</FormLabel>
                      <FormControl>
                        <Input
                          disabled={loading}
                          placeholder="Enter first name"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="last_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Last Name</FormLabel>
                      <FormControl>
                        <Input
                          disabled={loading}
                          placeholder="Enter last name"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input
                        disabled={loading || !!employeeId}
                        placeholder="Enter email"
                        type="email"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="phone_number"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Phone Number</FormLabel>
                    <FormControl>
                      <Input
                        disabled={loading}
                        placeholder="Enter phone number"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="role"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Role</FormLabel>
                      <Select
                        disabled={loading}
                        onValueChange={field.onChange}
                        value={field.value}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select role" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {roles.map((role) => (
                            <SelectItem key={role} value={role}>
                              {role}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="position"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Position</FormLabel>
                      <FormControl>
                        <Input
                          disabled={loading}
                          placeholder="Enter position"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              {branches.length > 0 && (
                <FormField
                  control={form.control}
                  name="branch_id"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Branch</FormLabel>
                      <Select
                        disabled={loading}
                        onValueChange={field.onChange}
                        value={field.value}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select branch" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {branches.map((branch) => (
                            <SelectItem key={branch.id} value={branch.id}>
                              {branch.branch_name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}

              {!employeeId && (
                <FormField
                  control={form.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Password</FormLabel>
                      <FormControl>
                        <Input
                          disabled={loading}
                          placeholder="Enter password"
                          type="password"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}

              <div className="flex justify-end space-x-2 pt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => router.push('/employees')}
                  disabled={loading}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={loading}
                  className="w-32"
                >
                  {loading && <LoaderCircle className="h-4 w-4 animate-spin mr-2" />}
                  {employeeId ? 'Update' : 'Create'}
                </Button>
              </div>
            </form>
          </Form>

          {alert && (
            <Alert className={`fixed bottom-4 right-4 w-96 text-white ${alert.type === 'success' ? 'bg-green-500' : 'bg-red-500'}`}>
              <InfoIcon className="h-4 w-4" />
              <AlertTitle>{alert.type.toUpperCase()}</AlertTitle>
              <AlertDescription>{alert.message}</AlertDescription>
            </Alert>
          )}
        </div>
      </EmployeesLayout>
    </AppLayout>
  );
}